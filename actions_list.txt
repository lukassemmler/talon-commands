# Open Talon REPL and then run 'actions.list()'
# 'actions.list()' is defined in 'C:\Program Files\Talon\Lib\site-packages\talon\scripting\actions.pyi'
# Some actions like 'edit.extend_line_start()' are defined by Talon itself ('C:\Program Files\Talon\Lib\site-packages\talon\scripting\core\edit.pyi')

app.bundle() -> str
  Get active app's bundle identifier

app.executable() -> str
  Get active app's executable name

app.name() -> str
  Get active app's name

app.notify(body: str = '', title: str = '', subtitle: str = '', sound: bool = False)
  Show a desktop notification

app.path() -> str
  Get active app's file path

app.preferences()
  Open app preferences

app.tab_close()
  Close the current tab

app.tab_detach()
  Move the current tab to a new window

app.tab_next()
  Switch to next tab for this window

app.tab_open()
  Open a new tab

app.tab_previous()
  Switch to previous tab for this window

app.tab_reopen()
  Re-open the last-closed tab

app.window_close()
  Close the current window

app.window_hide()
  Hide the current window

app.window_hide_others()
  Hide all other windows

app.window_next()
  Switch to next window for this app

app.window_open()
  Open a new window

app.window_previous()
  Switch to previous window for this app

browser.address() -> str
  Get page URL

browser.bookmark()
  Bookmark the current page

browser.bookmark_tabs()
  Bookmark all open tabs

browser.bookmarks()
  Open the Bookmarks editor

browser.bookmarks_bar()
  Toggle the bookmarks bar

browser.focus_address()
  Focus address bar

browser.focus_page()
  Focus the page body

browser.focus_search()
  Focus the search box

browser.go(url: str)
  Go to a new URL

browser.go_back()
  Go back in the history

browser.go_blank()
  Go to a blank page

browser.go_forward()
  Go forward in the history

browser.go_home()
  Go to home page

browser.open_private_window()
  Open a private browsing window

browser.reload()
  Reload current page

browser.reload_hard()
  Reload current page (harder)

browser.reload_hardest()
  Reload current page (hardest)

browser.show_clear_cache()
  Show 'Clear Cache' dialog

browser.show_downloads()
  Show download list

browser.show_extensions()
  Show installed extensions

browser.show_history()
  Show recently visited pages

browser.submit_form()
  Submit the current form

browser.title() -> str
  Get page title

browser.toggle_dev_tools()
  Open or close the developer tools

clip.capture_text(key: str)
  Send key sequence and return resulting clipboard text

clip.clear() -> None
  Clear clipboard contents

clip.image() -> Optional[talon.skia.image.Image]
  Get clipboard image

clip.set_image(image: talon.skia.image.Image)
  Set clipboard image

clip.set_text(text: str)
  Set clipboard text

clip.text() -> str
  Get clipboard text

code.complete()
  Trigger code autocomplete

code.extend_scope_end()
  Extend selection to end of current scope

code.extend_scope_in()
  Extend selection to start of first inner scope

code.extend_scope_next()
  Extend selection to start of next sibling scope

code.extend_scope_out()
  Extend selection to start of outer scope

code.extend_scope_previous()
  Extend selection to start of previous sibling scope

code.extend_scope_start()
  Extend selection to start of current scope

code.language() -> str
  Return the active programming language

code.rename(name: str)
  Rename selection to <name>

code.scope_end()
  Move cursor to end of current scope

code.scope_in()
  Move cursor to start of first inner scope

code.scope_next()
  Move cursor to start of next sibling scope

code.scope_out()
  Move cursor to start of outer scope

code.scope_previous()
  Move cursor to start of previous sibling scope

code.scope_start()
  Move cursor to start of current scope

code.select_scope()
  Select scope under cursor

code.toggle_comment()
  Toggle comments on the current line(s)

core.cancel_phrase__unstable()
  Cancel the currently running phrase

core.current_command__unstable() -> Tuple[talon.scripting.types.CommandImpl, talon.grammar.vm.Capture]
  Return the currently executing command

core.last_command() -> Tuple[talon.scripting.types.CommandImpl, talon.grammar.vm.Capture]
  Return the last executed command

core.last_phrase() -> talon.grammar.vm.Capture
  Return the last-spoken phrase

core.recent_commands() -> Sequence[Sequence[Tuple[talon.scripting.types.CommandImpl, talon.grammar.vm.Capture]]]
  Return recently executed commands (grouped by phrase)

core.recent_phrases() -> Sequence[talon.grammar.vm.Capture]
  Return recently-spoken phrases

core.repeat_command(times: int = 1)
  Repeat the last command N times

core.repeat_partial_phrase(times: int = 1)
  Repeat the previous phrase or current partial phrase N times

core.repeat_phrase(times: int = 1)
  Repeat the last phrase N times

core.replace_command(commands: Sequence[Tuple[talon.scripting.types.CommandImpl, talon.grammar.vm.Capture]])
  Replace the current command in history with one or more commands

core.run_command(cmd: talon.scripting.types.CommandImpl, m: talon.grammar.vm.Capture)
  Run a single command for a recognized phrase

core.run_hotkey(hotkey: talon.scripting.types.ScriptImpl)
  Run all commands for a hotkey

core.run_phrase(phrase: talon.grammar.vm.Capture)
  Run all commands for a recognized phrase

core.run_talon_script(ctx: talon.scripting.rctx.ResourceContext, script: talon.scripting.talon_script.TalonScript, m: talon.grammar.vm.Capture)
  Run a single TalonScript for a recognized phrase

_debug.dfa_benchmark(N: int = 3)
  Runs DFA performance tests on all grammar and lists

dictate.join_words(words: Sequence[str], separator: str = ' ') -> str
  Join a list of words into a single string for insertion

dictate.lower(p: talon.grammar.vm.Phrase)
  Insert lowercase text with auto_insert()

dictate.natural(p: talon.grammar.vm.Phrase)
  Insert naturally-capitalized text with auto_insert()

dictate.parse_words(p: talon.grammar.vm.Phrase) -> Sequence[str]
  Extract words from a spoken Capture

dictate.replace_words(words: Sequence[str]) -> Sequence[str]
  Replace words according to the dictate.word_map dictionary setting

edit.copy()
  Copy selection to clipboard

edit.cut()
  Cut selection to clipboard

edit.delete()
  Delete selection

edit.delete_line()
  Delete line under cursor

edit.delete_paragraph()
  Delete paragraph under cursor

edit.delete_sentence()
  Delete sentence under cursor

edit.delete_word()
  Delete word under cursor

edit.down()
  Move cursor down one row

edit.extend_again()
  Extend selection again in the same way

edit.extend_column(n: int)
  Extend selection to column <n>

edit.extend_down()
  Extend selection down one row

edit.extend_file_end()
  Extend selection to end of file

edit.extend_file_start()
  Extend selection to start of file

edit.extend_left()
  Extend selection left one column

edit.extend_line(n: int)
  Extend selection to include line <n>

edit.extend_line_down()
  Extend selection down one full line

edit.extend_line_end()
  Extend selection to end of line

edit.extend_line_start()
  Extend selection to start of line

edit.extend_line_up()
  Extend selection up one full line

edit.extend_page_down()
  Extend selection down one page

edit.extend_page_up()
  Extend selection up one page

edit.extend_paragraph_end()
  Extend selection to the end of the current paragraph

edit.extend_paragraph_next()
  Extend selection to the start of the next paragraph

edit.extend_paragraph_previous()
  Extend selection to the start of the previous paragraph

edit.extend_paragraph_start()
  Extend selection to the start of the current paragraph

edit.extend_right()
  Extend selection right one column

edit.extend_sentence_end()
  Extend selection to the end of the current sentence

edit.extend_sentence_next()
  Extend selection to the start of the next sentence

edit.extend_sentence_previous()
  Extend selection to the start of the previous sentence

edit.extend_sentence_start()
  Extend selection to the start of the current sentence

edit.extend_up()
  Extend selection up one row

edit.extend_word_left()
  Extend selection left one word

edit.extend_word_right()
  Extend selection right one word

edit.file_end()
  Move cursor to end of file (start of line)

edit.file_start()
  Move cursor to start of file

edit.find(text: str = None)
  Open Find dialog, optionally searching for text

edit.find_next()
  Select next Find result

edit.find_previous()
  Select previous Find result

edit.indent_less()
  Remove a tab stop of indentation

edit.indent_more()
  Add a tab stop of indentation

edit.jump_column(n: int)
  Move cursor to column <n>

edit.jump_line(n: int)
  Move cursor to line <n>

edit.left()
  Move cursor left one column

edit.line_clone()
  Create a new line identical to the current line

edit.line_down()
  Move cursor to start of line below

edit.line_end()
  Move cursor to end of line

edit.line_insert_down()
  Insert line below cursor

edit.line_insert_up()
  Insert line above cursor

edit.line_start()
  Move cursor to start of line

edit.line_swap_down()
  Swap the current line with the line below

edit.line_swap_up()
  Swap the current line with the line above

edit.line_up()
  Move cursor to start of line above

edit.move_again()
  Move cursor again in the same way

edit.page_down()
  Move cursor down one page

edit.page_up()
  Move cursor up one page

edit.paragraph_end()
  Move cursor to the end of the current paragraph

edit.paragraph_next()
  Move cursor to the start of the next paragraph

edit.paragraph_previous()
  Move cursor to the start of the previous paragraph

edit.paragraph_start()
  Move cursor to the start of the current paragraph

edit.paste()
  Paste clipboard at cursor

edit.paste_match_style()
  Paste clipboard without style information

edit.print()
  Open print dialog

edit.redo()
  Redo

edit.right()
  Move cursor right one column

edit.save()
  Save current document

edit.save_all()
  Save all open documents

edit.select_all()
  Select all text in the current document

edit.select_line(n: int = None)
  Select entire line <n>, or current line

edit.select_lines(a: int, b: int)
  Select entire lines from <a> to <b>

edit.select_none()
  Clear current selection

edit.select_paragraph()
  Select the entire nearest paragraph

edit.select_sentence()
  Select the entire nearest sentence

edit.select_word()
  Select word under cursor

edit.selected_text() -> str
  Get currently selected text

edit.selection_clone()
  Insert a copy of the current selection

edit.sentence_end()
  Move cursor to the end of the current sentence

edit.sentence_next()
  Move cursor to the start of the next sentence

edit.sentence_previous()
  Move cursor to the start of the previous sentence

edit.sentence_start()
  Move cursor to the start of the current sentence

edit.undo()
  Undo

edit.up()
  Move cursor up one row

edit.word_left()
  Move cursor left one word

edit.word_right()
  Move cursor right one word

edit.zoom_in()
  Zoom in

edit.zoom_out()
  Zoom out

edit.zoom_reset()
  Zoom to original size

auto_format(text: str) -> str
  Apply text formatting, such as auto spacing, for the native language

auto_insert(text: str)
  Insert text at the current cursor position, automatically formatting it using the actions.auto_format(text)

insert(text: str)
  Insert text at the current cursor position

key(key: str)
  Press one or more keys by name, space-separated

mimic(text: str)
  Simulate speaking {text}

mouse_click(button: int = 0)
  Press and release a mouse button

mouse_drag(button: int = 0)
  Hold down a mouse button

mouse_move(x: float, y: float)
  Move mouse to (x, y) coordinate

mouse_release(button: int = 0)
  Release a mouse button

mouse_scroll(y: float = 0, x: float = 0, by_lines: bool = False)
  Scroll the mouse wheel

mouse_x() -> float
  Mouse X position

mouse_y() -> float
  Mouse Y position

print(obj: Any)
  Display an object in the log

skip()
  Do nothing

sleep(duration: Union[float, str])
  Pause for some duration.
            If you use a number, it is seconds, e.g 1.5 seconds or 0.001 seconds.
            If you use a string, it is a timespec, such as "50ms" or "10s"
            For performance reasons, sleep() cannot be reimplemented by a Context.

migrate.backup_user()
  Backup the .talon/user/ directory to a zip file in .talon/backups/

migrate.v02_all(prefix: str = '', verbose: bool = False)
  Perform migrations for Talon v0.2 on all files in user/

migrate.v02_one(path: str, verbose: bool = False)
  Migrate action() definitions from a .talon file to a new Python file.

mode.disable(mode: str)
  Disable a mode

mode.enable(mode: str)
  Enable a mode

mode.restore()
  Restore saved modes

mode.save()
  Save all active modes

mode.toggle(mode: str)
  Toggle a mode

path.talon_app() -> str
  Path to Talon application

path.talon_home() -> str
  Path to home/.talon

path.talon_user() -> str
  Path to Talon user

path.user_home() -> str
  Path to user home

speech.disable()
  Disable speech recognition

speech.enable()
  Enable speech recognition

speech.enabled() -> bool
  Test if speech recognition is enabled

speech.record_flac()
  Record the phrase audio to a flac file

speech.record_wav()
  Record the phrase audio to a wave file

speech.replay(path: str)
  Replay a .flac or .wav file into the speech engine

speech.set_microphone(name: str)
  Set the currently active microphone - DEPRECATED

speech.toggle(value: bool = None)
  Toggle speech recognition

sound.active_microphone() -> str
  Return active microphone name

sound.microphones() -> Sequence[str]
  Return a list of available microphone names

sound.set_microphone(name: str)
  Set the currently active microphone

win.file_ext() -> str
  Return the open file's extension

win.filename() -> str
  Return the open filename

win.title() -> str
  Get window title

menu.check_for_updates()
  Check for updates

menu.open_log()
  Open Talon log

menu.open_repl()
  Open Talon REPL

menu.open_talon_home()
  Open Talon config folder

user.mouse_center_window()
  Moves mouse to center of window

user.mouse_move_in_window(offset_x: int, offset_y: int)
  Moves mouse to the layer menu

user.press_key_with_delay(key: str, modifiers: str = '', delay: int = 0)
  Waits a specified number of milli seconds before pressing a key

user.minecraft_hold_key(key: str, duration: int = 0)
  Holds specified key for a duration (duration in milli seconds)

user.minecraft_hold_mouse(button: int, duration: int = 0)
  Holds specified mouse button for a duration (in seconds)

user.minecraft_move_mouse(move_x: int, move_y: int)
  Moves mouse along x axis

user.grid_variable_activate()
  Show mouse grid

user.grid_variable_close()
  Close the active grid

user.grid_variable_go_back()
  Sets the grid state back to what it was before the last command

user.grid_variable_narrow(digit: Union[int, str])
  Choose a field of the grid and narrow the selection down

user.grid_variable_narrow_list(digit_list: List[str])
  Choose fields multiple times in a row

user.grid_variable_place_window()
  Places the grid on the currently active window

user.grid_variable_reset()
  Resets the grid to fill the whole screen again

user.grid_variable_select_screen(screen: int)
  Brings up mouse grid

user.password_delete()
  Delete password

user.password_duplicate()
  Duplicate password

user.password_edit()
  Edit password

user.password_fill()
  fill the password

user.password_new()
  New password

user.password_show()
  show the password

user.discord_answer_call()
  Answer incoming call

user.discord_deafen()
  Toggle deafen

user.discord_decline_call()
  Decline incoming call

user.discord_emoji_picker()
  Toggle emoji picker

user.discord_gif_picker()
  Toggle gif picker

user.discord_mark_inbox_read()
  Mark top inbox channel read

user.discord_mentions_last()
  Go up to channel with unread mentions

user.discord_mentions_next()
  Go down to channel with unread mentions

user.discord_mute()
  Toggle mute

user.discord_oldest_unread()
  Go to oldest unread message

user.discord_toggle_inbox()
  Toggle inbox popout

user.discord_toggle_members()
  Toggle channel member list

user.discord_toggle_pins()
  Toggle pins popout

user.snippet_create()
  Triggers snippet creation

user.snippet_hide()
  Hides the snippet UI

user.snippet_insert(text: str)
  Inserts a snippet

user.snippet_search(text: str)
  Triggers the program's snippet search

user.snippet_toggle()
  Toggles UI for available snippets

user.terminal_change_directory(path: str)
  Lists change directory

user.terminal_change_directory_root()
  Root of current drive

user.terminal_clear_screen()
  Clear screen

user.terminal_kill_all()
  kills the running command

user.terminal_list_all_directories()
  Lists all directories including hidden

user.terminal_list_directories()
  Lists directories

user.terminal_rerun_search(command: str)
  Searches through the previously executed commands

user.terminal_run_last()
  Repeats the last command

user.i3wm_launch()
  Trigger the i3 launcher

user.i3wm_lock()
  Trigger the lock screen

user.i3wm_shell()
  Launch a shell

user.idea(commands: str)
  Send a command to Jetbrains product

user.idea_grab(times: int)
  Copies specified number of words to the left

user.wsl_reset_path_detection()
  reset wsl path detection

user.did_emit_pre_phrase_signal() -> bool
  Indicates whether the pre-phrase signal was emitted at the start of this phrase

user.emit_pre_phrase_signal()
  Touches a file to indicate that a phrase is about to begin execution

user.trigger_command_server_command_execution()
  Issue keystroke to trigger command server to execute command that
        was written to the file.  For internal use only

user.vscode(command_id: str)
  Execute command via vscode command server, if available, or fallback
        to command palette.

user.vscode_and_wait(command_id: str)
  Execute command via vscode command server, if available, and wait
        for command to finish.  If command server not available, uses command
        palette and doesn't guarantee that it will wait for command to
        finish.

user.vscode_get(command_id: str, arg1: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>, arg2: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>, arg3: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>, arg4: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>, arg5: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>) -> Any
  Execute command via vscode command server and return command output.

user.vscode_with_plugin(command_id: str, arg1: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>, arg2: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>, arg3: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>, arg4: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>, arg5: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>)
  Execute command via vscode command server.

user.vscode_with_plugin_and_wait(command_id: str, arg1: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>, arg2: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>, arg3: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>, arg4: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>, arg5: Any = <class 'user.knausj_talon.apps.vscode.command_client.command_client.NotSet'>)
  Execute command via vscode command server and wait for command to finish.

user.command_palette()
  Show command palette

user.vscode_terminal(number: int)
  Activate a terminal by number

user.chapter_current() -> int
  Return current chapter number

user.chapter_final()
  Go to final chapter

user.chapter_jump(number: int)
  Go to chapter number

user.chapter_next()
  Go to next chapter

user.chapter_previous()
  Go to previous chapter

user.code_clear_language_mode()
  Clears the active language mode, and re-enables code.language

user.code_set_language_mode(language: str)
  Sets the active language mode, and disables extension matching

user.create_spoken_forms(source: str, words_to_exclude: Optional[List[str]] = None, minimum_term_length: int = 3, generate_subsequences: bool = True) -> List[str]
  Create spoken forms for a given source

user.create_spoken_forms_from_list(sources: List[str], words_to_exclude: Optional[List[str]] = None, minimum_term_length: int = 3, generate_subsequences: bool = True) -> Dict[str, str]
  Create spoken forms for all sources in a list, doing conflict resolution

user.create_spoken_forms_from_map(sources: Mapping[str, Any], words_to_exclude: Optional[List[str]] = None, minimum_term_length: int = 3, generate_subsequences: bool = True) -> Dict[str, Any]
  Create spoken forms for all sources in a map, doing conflict resolution

user.debugger_add_hw_breakpoint()
  Add one hardware breakpoint in the debugger

user.debugger_add_sw_breakpoint()
  Add one software breakpoint in the debugger

user.debugger_backtrace()
  Print a back trace in the debugger

user.debugger_break_here()
  Set a break on the current line

user.debugger_break_now()
  Break into the debugger

user.debugger_clear_all_breakpoints()
  Clear all breakpoints in the debugger

user.debugger_clear_breakpoint()
  Clear one breakpoint in the debugger

user.debugger_clear_breakpoint_id(number_small: int)
  Clear one breakpoint id in the debugger

user.debugger_clear_line()
  Clear unwanted data from the command line

user.debugger_continue()
  Continue execution in the debugger

user.debugger_detach()
  Detach the debugger

user.debugger_disable_all_breakpoints()
  Disable all breakpoints in the debugger

user.debugger_disable_breakpoint()
  Disable one breakpoint in the debugger

user.debugger_disable_breakpoint_id(number_small: int)
  Disable one breakpoint id in the debugger

user.debugger_disassemble()
  Preps the disassemble command in the debugger

user.debugger_disassemble_clipboard()
  Disassemble instructions at an address in the clipboard

user.debugger_disassemble_here()
  Disassembles instructions at the current instruction pointer

user.debugger_dump_ascii_string()
  Display as specific address as an ascii string in the debugger

user.debugger_dump_pointers()
  Display as specific address as a list of pointers in the debugger

user.debugger_dump_unicode_string()
  Display as specific address as an unicode string in the debugger

user.debugger_enable_all_breakpoints()
  Enable all breakpoints in the debugger

user.debugger_enable_breakpoint()
  Enable one breakpoint in the debugger

user.debugger_enable_breakpoint_id(number_small: int)
  Enable one breakpoint id in the debugger

user.debugger_exit()
  Exit the debugger

user.debugger_get_register()
  Print specific register in the debugger

user.debugger_goto_address()
  Jump to a specific address in the debugger

user.debugger_goto_clipboard()
  Jump to a specific address stored in the clipboard

user.debugger_goto_highlighted()
  Jump to a specific highlighted address in the debugger

user.debugger_inspect_type()
  Inspect a specific data type in the debugger

user.debugger_list_modules()
  List the loaded modules in the debuggee memory space

user.debugger_restart()
  Restart execution in the debugger

user.debugger_set_register()
  Set specific register in the debugger

user.debugger_show_breakpoints()
  Print the current breakpoints in the debugger

user.debugger_show_registers()
  Print the current registers in the debugger

user.debugger_start()
  Start debugging

user.debugger_step_into()
  Step into an instruction in the debugger

user.debugger_step_line()
  Step into a source line in the debugger

user.debugger_step_out()
  Step until function exit in the debugger

user.debugger_step_over()
  Step over an instruction in the debugger

user.debugger_step_over_line()
  Step over a source line in the debugger

user.debugger_stop()
  Stop the debugger

user.delayed_speech_off()
  Disables "temporary speech" mode lazily, meaning that the next
        phrase that finishes will turn speech off.

user.delayed_speech_on()
  Activates a "temporary speech" mode that can be disabled lazily,
        so that the actual disable command happens after whatever phrase
        finishes next.

user.desktop(number: int)
  change the current desktop

user.desktop_last()
  move to previous desktop

user.desktop_next()
  move to next desktop

user.desktop_show()
  shows the current desktops

user.window_move_desktop(desktop_number: int)
  move the current window to a different desktop

user.window_move_desktop_left()
  move the current window to the desktop to the left

user.window_move_desktop_right()
  move the current window to the desktop to the right

user.clobber_selection_if_exists()
  Deletes the currently selected text if it exists; otherwise does nothing.

user.dictation_format_cap()
  Sets the dictation formatter to capitalize

user.dictation_format_no_cap()
  Sets the dictation formatter to not capitalize

user.dictation_format_no_space()
  Sets the dictation formatter to not prepend a space

user.dictation_format_reset()
  Resets the dictation formatter

user.dictation_insert(text: str, auto_cap: bool = True) -> str
  Inserts dictated text, formatted appropriately.

user.dictation_insert_raw(text: str)
  Inserts text as-is, without invoking the dictation formatter.

user.dictation_peek_left(clobber: bool = False) -> Optional[str]
  Tries to get some text before the cursor, ideally a word or two, for the
        purpose of auto-spacing & -capitalization. Results are not guaranteed;
        dictation_peek_left() may return None to indicate no information. (Note
        that returning the empty string "" indicates there is nothing before
        cursor, ie. we are at the beginning of the document.)

        If there is currently a selection, dictation_peek_left() must leave it
        unchanged unless `clobber` is true, in which case it may clobber it.

user.dictation_peek_right() -> Optional[str]
  Tries to get a few characters after the cursor for auto-spacing.
        Results are not guaranteed; dictation_peek_right() may return None to
        indicate no information. (Note that returning the empty string ""
        indicates there is nothing after cursor, ie. we are at the end of the
        document.)

user.dictation_reformat_cap()
  Capitalizes the last utterance

user.dictation_reformat_no_cap()
  Lowercases the last utterance

user.dictation_reformat_no_space()
  Removes space before the last utterance

user.paste(text: str)
  Pastes text and preserves clipboard

user.words_left(n: int)
  Moves left by n words.

user.words_right(n: int)
  Moves right by n words.

user.engine_mimic(cmd: str)
  Sends phrase to engine

user.engine_sleep()
  Sleep the engine

user.engine_wake()
  Wake the engine

user.system_command(cmd: str)
  execute a command on the system

user.system_command_nb(cmd: str)
  execute a command on the system without blocking

user.file_manager_current_path() -> str
  Returns the current path for the active file manager.

user.file_manager_get_directory_by_index(index: int) -> str
  Returns the requested directory for the imgui display by index

user.file_manager_get_file_by_index(index: int) -> str
  Returns the requested directory for the imgui display by index

user.file_manager_go_back()
  file_manager_go_forward_directory

user.file_manager_go_forward()
  file_manager_go_forward_directory

user.file_manager_hide_pickers()
  Hides the pickers

user.file_manager_new_folder(name: str)
  Creates a new folder in a gui filemanager or inserts the command to do so for terminals

user.file_manager_next_file_page()
  next_file_page

user.file_manager_next_folder_page()
  next_folder_page

user.file_manager_open_directory(path: str)
  opens the directory that's already visible in the view

user.file_manager_open_file(path: str)
  opens the file

user.file_manager_open_parent()
  file_manager_open_parent

user.file_manager_open_user_directory(path: str)
  expands and opens the user directory

user.file_manager_open_volume(volume: str)
  file_manager_open_volume

user.file_manager_previous_file_page()
  previous_file_page

user.file_manager_previous_folder_page()
  previous_folder_page

user.file_manager_refresh_title()
  Refreshes the title to match current directory. this is for e.g. windows command prompt that will need to do some magic.

user.file_manager_select_directory(path: str)
  selects the directory

user.file_manager_select_file(path: str)
  selects the file

user.file_manager_show_properties()
  Shows the properties for the file

user.file_manager_terminal_here()
  Opens terminal at current location

user.file_manager_toggle_pickers()
  Shows the pickers

user.file_manager_update_lists()
  Forces an update of the lists (e.g., when file or folder created)

user.find(text: str)
  Finds text in current editor

user.find_everywhere(text: str)
  Finds text across project

user.find_next()
  Navigates to the next occurrence

user.find_previous()
  Navigates to the previous occurrence

user.find_toggle_match_by_case()
  Toggles find match by case sensitivity

user.find_toggle_match_by_regex()
  Toggles find match by regex

user.find_toggle_match_by_word()
  Toggles find match by whole words

user.replace(text: str)
  Search and replace for text in the active editor

user.replace_confirm()
  Confirm replace at current position

user.replace_confirm_all()
  Confirm replace all

user.replace_everywhere(text: str)
  Search and replaces for text in the entire project

user.select_next_occurrence(text: str)
  Selects the next occurrence of the text, and suppresses any find/replace dialogs.

user.select_previous_occurrence(text: str)
  Selects the previous occurrence of the text, and suppresses any find/replace dialogs.

user.formatted_text(phrase: Union[str, talon.grammar.vm.Phrase], formatters: str) -> str
  Formats a phrase according to formatters. formatters is a comma-separated string of formatters (e.g. 'CAPITALIZE_ALL_WORDS,DOUBLE_QUOTED_STRING')

user.formatters_reformat_last(formatters: str) -> str
  Clears and reformats last formatted phrase

user.formatters_reformat_selection(formatters: str) -> str
  Reformats the current selection.

user.get_formatters_words()
  returns a list of words currently used as formatters, and a demonstration string using those formatters

user.insert_formatted(phrase: Union[str, talon.grammar.vm.Phrase], formatters: str)
  Inserts a phrase formatted according to formatters. Formatters is a comma separated list of formatters (e.g. 'CAPITALIZE_ALL_WORDS,DOUBLE_QUOTED_STRING')

user.insert_many(strings: List[str]) -> None
  Insert a list of strings, sequentially.

user.reformat_text(text: str, formatters: str) -> str
  Reformat the text.

user.help_context()
  Display contextual command info

user.help_context_enabled()
  Display contextual command info

user.help_formatters(ab: dict)
  Provides the list of formatter keywords

user.help_hide()
  Hides the help

user.help_list(ab: str)
  Provides the symbol dictionary

user.help_next()
  Navigates to next page

user.help_previous()
  Navigates to previous page

user.help_refresh()
  Refreshes the help

user.help_return()
  Returns to the main help window

user.help_search(phrase: str)
  Display command info for search phrase

user.help_select_index(index: int)
  Select the context by a number

user.help_selected_context(m: str)
  Display command info for selected context

user.history_clear()
  Clear the history

user.history_disable()
  Disables the history

user.history_enable()
  Enables the history

user.history_get(number: int)
  returns the history entry at the specified index

user.history_less()
  Show less history

user.history_more()
  Show more history

user.history_toggle()
  Toggles viewing the history

user.homophones_force_show(m: str)
  Show the homophones display forcibly

user.homophones_force_show_selection()
  Show the homophones display for the selected text forcibly

user.homophones_get(word: str) -> [<class 'str'>]
  Get homophones for the given word

user.homophones_hide()
  Hides the homophones display

user.homophones_select(number: int) -> str
  selects the homophone by number

user.homophones_show(m: str)
  Show the homophones display

user.homophones_show_selection()
  Show the homophones display for the selected text

user.camel_left()
  Moves cursor to the left by camel case/subword

user.camel_right()
  Move cursor to the right by camel case/subword

user.extend_camel_left()
  Extends the selection by camel/subword to the left

user.extend_camel_right()
  Extends the selection by camel/subword to the right

user.extend_until_line(line: int)
  Extends the selection from current line to the specified line

user.line_clone(line: int)
  Clones specified line at current position

user.select_range(line_start: int, line_end: int)
  Selects lines from line_start to line line_end

user.macro_play()
  player recorded macro

user.macro_record()
  record a new macro

user.macro_stop()
  stop recording

user.play_pause()
  Plays or pauses media

user.messaging_channel_next()
  Move to next channel

user.messaging_channel_previous()
  Move to previous channel

user.messaging_mark_channel_read()
  Mark this channel as read.

user.messaging_mark_workspace_read()
  Mark this workspace/server as read

user.messaging_open_channel_picker()
  Open channel picker

user.messaging_open_search()
  Open message search

user.messaging_unread_next()
  Moved to next unread channel

user.messaging_unread_previous()
  Move to previous unread channel

user.messaging_upload_file()
  Upload a file as a message

user.messaging_workspace_next()
  Move to next qorkspace/server

user.messaging_workspace_previous()
  Move to previous workspace/server

user.microphone_select(index: int)
  Selects a micropohone

user.microphone_selection_hide()
  Hide the microphone selection GUI

user.microphone_selection_toggle()
  Show GUI for choosing the Talon microphone

user.copy_mouse_position()
  Copy the current mouse position coordinates

user.mouse_calibrate()
  Start calibration

user.mouse_cancel_zoom_mouse()
  Cancel zoom mouse if pending

user.mouse_drag(button: int)
  Press and hold/release a specific mouse button for dragging

user.mouse_drag_end()
  Releases any held mouse buttons

user.mouse_gaze_scroll()
  Starts gaze scroll

user.mouse_hide_cursor()
  Hides the cursor

user.mouse_move_center_active_window()
  move the mouse cursor to the center of the currently active window

user.mouse_scroll_down(amount: float = 1)
  Scrolls down

user.mouse_scroll_down_continuous()
  Scrolls down continuously

user.mouse_scroll_left(amount: float = 1)
  Scrolls left

user.mouse_scroll_right(amount: float = 1)
  Scrolls right

user.mouse_scroll_stop()
  Stops scrolling

user.mouse_scroll_up(amount: float = 1)
  Scrolls up

user.mouse_scroll_up_continuous()
  Scrolls up continuously

user.mouse_show_cursor()
  Shows the cursor

user.mouse_sleep()
  Disables control mouse, zoom mouse, and re-enables cursor

user.mouse_toggle_camera_overlay()
  Toggles camera overlay

user.mouse_toggle_control_mouse()
  Toggles control mouse

user.mouse_toggle_zoom_mouse()
  Toggles zoom mouse

user.mouse_trigger_zoom_mouse()
  Trigger zoom mouse if enabled

user.mouse_wake()
  Enable control mouse, zoom mouse, and disables cursor

user.multi_cursor_add_above()
  Adds cursor to line above

user.multi_cursor_add_below()
  Adds cursor to line below

user.multi_cursor_add_to_line_ends()
  Adds cursor at end of every selected line

user.multi_cursor_disable()
  Disables multi-cursor mode

user.multi_cursor_enable()
  Enables multi-cursor mode

user.multi_cursor_select_all_occurrences()
  Adds cursor at every occurrence of selection

user.multi_cursor_select_fewer_occurrences()
  Removes selection & cursor at last occurrence

user.multi_cursor_select_more_occurrences()
  Adds cursor at next occurrence of selection

user.multi_cursor_skip_occurrence()
  Skips adding a cursor at next occurrence of selection

user.page_current() -> int
  Return current page number

user.page_final()
  Go to final page

user.page_jump(number: int)
  Go to page number

user.page_next()
  Go to next page

user.page_previous()
  Go to previous page

user.add_phrase_to_history(text: str)
  Adds a phrase to the phrase history

user.before_last_phrase()
  Moves left before the last phrase

user.clear_last_phrase()
  Clears the last phrase

user.get_last_phrase() -> str
  Gets the last phrase

user.get_recent_phrase(number: int) -> str
  Gets the nth most recent phrase

user.phrase_history_hide()
  Hides the recent phrases window

user.select_last_phrase()
  Selects the last phrase

user.toggle_phrase_history()
  Toggles list of recent phrases

user.screens_get_by_number(screen_number: int) -> talon.screen.Screen
  Get screen by number

user.screens_get_next(screen: talon.screen.Screen) -> talon.screen.Screen
  Get the screen after this one

user.screens_get_previous(screen: talon.screen.Screen) -> talon.screen.Screen
  Get the screen before this one

user.screens_show_numbering()
  Show screen number on each screen

user.screenshot(screen_number: Optional[int] = None)
  Takes a screenshot of the entire screen and saves it to the pictures folder.
        Optional screen number can be given to use screen other than main.

user.screenshot_clipboard(screen_number: Optional[int] = None)
  Takes a screenshot of the entire screen and saves it to the clipboard.
        Optional screen number can be given to use screen other than main.

user.screenshot_selection()
  Triggers an application is capable of taking a screenshot of a portion of the screen

user.screenshot_window()
  Takes a screenshot of the active window and saves it to the pictures folder

user.screenshot_window_clipboard()
  Takes a screenshot of the active window and saves it to the clipboard

user.split_clear()
  Clears the current split

user.split_clear_all()
  Clears all splits

user.split_flip()
  Flips the orietation of the active split

user.split_last()
  Goes to last split

user.split_next()
  Goes to next split

user.split_number(index: int)
  Navigates to a the specified split

user.split_window()
  Splits the window

user.split_window_down()
  Move active tab to lower split

user.split_window_horizontally()
  Splits window horizontally

user.split_window_left()
  Move active tab to left split

user.split_window_right()
  Move active tab to right split

user.split_window_up()
  Move active tab to upper split

user.split_window_vertically()
  Splits window vertically

user.get_running_app(name: str) -> talon.windows.ui.App
  Get the first available running app with `name`.

user.switcher_focus(name: str)
  Focus a new application by name

user.switcher_focus_app(app: talon.windows.ui.App)
  Focus application and wait until switch is made

user.switcher_focus_window(window: talon.windows.ui.Window)
  Focus window and wait until switch is made

user.switcher_hide_running()
  Hides list of running applications

user.switcher_launch(path: str)
  Launch a new application by path (all OSes), or AppUserModel_ID path on Windows

user.switcher_menu()
  Open a menu of running apps to switch to

user.switcher_toggle_running()
  Shows/hides all running applications

user.tab_close_wrapper()
  Closes the current tab.
        Exists so that apps can implement their own delay before running tab_close() to handle repetitions better.

user.tab_duplicate()
  Duplicates the current tab.

user.tab_final()
  Jumps to the final tab

user.tab_jump(number: int)
  Jumps to the specified tab

user.talon_action_find(action: str)
  Runs action.find for the provided action and dumps to the log

user.talon_add_context_clipboard()
  Adds os-specific context info to the clipboard for the focused app for .talon files

user.talon_add_context_clipboard_python()
  Adds os-specific context info to the clipboard for the focused app for .py files. Assumes you've a Module named mod declared.

user.talon_copy_list(name: str)
  Dumps the contents of list to the console

user.talon_debug_all_settings()
  Dumps all settings to the console

user.talon_debug_app_windows(app: str)
  Pretty prints the application windows

user.talon_debug_list(name: str)
  Dumps the contents of list to the console

user.talon_debug_modes()
  Dumps active modes to the console

user.talon_debug_scope(name: str)
  Dumps the active scope information to the console

user.talon_debug_setting(name: str)
  Dumps the current setting to the console

user.talon_debug_tags()
  Dumps the active tags to the console

user.talon_get_active_application_info() -> str
  Returns all active app info to the cliboard

user.talon_get_active_context() -> str
  Returns active context info

user.talon_pretty_format(obj: object)
  Pretty formats an object

user.talon_pretty_print(obj: object)
  Uses pretty print to dump an object

user.talon_sim_phrase(phrase: Union[str, talon.grammar.vm.Phrase])
  Sims the phrase in the active app and dumps to the log

user.talon_version_info() -> str
  Returns talon & operation system verison information

user.replace_phrases(words: Sequence[str]) -> Sequence[str]
  Replace phrases according to words_to_replace.csv

user.open_url(url: str)
  Visit the given URL.

user.search_with_search_engine(search_template: str, search_text: str)
  Search a search engine for given text

user.move_app_to_screen(app_name: str, screen_number: int)
  Move a specific application to another screen.

user.move_window_next_screen() -> None
  Move the active window to a specific screen.

user.move_window_previous_screen() -> None
  Move the active window to the previous screen.

user.move_window_to_screen(screen_number: int) -> None
  Move the active window leftward by one.

user.snap_app(app_name: str, pos: user.knausj_talon.code.window_snap.RelativeScreenPos)
  Snap a specific application to another screen.

user.snap_window(pos: user.knausj_talon.code.window_snap.RelativeScreenPos) -> None
  Move the active window to a specific position on-screen.

        See `RelativeScreenPos` for the structure of this position.

user.draft_editor_discard()
  Discard draft editor

user.draft_editor_open()
  Open draft editor

user.draft_editor_submit()
  Submit/save draft editor

user.insert_cursor(text: str)
  Insert a string. Leave the cursor wherever [|] is in the text

user.code_comment_block()
  Block comment

user.code_comment_block_prefix()
  Block comment start syntax

user.code_comment_block_suffix()
  Block comment end syntax

user.code_comment_documentation()
  Inserts a document comment and positions the cursor appropriately

user.code_comment_line_prefix()
  Inserts line comment prefix at current cursor location

user.code_insert_false()
  Insert False value

user.code_insert_true()
  Insert True value

user.code_insert_is_not_null()
  Inserts check for non-null

user.code_insert_is_null()
  Inserts check for null

user.code_insert_null()
  Inserts null

user.code_default_function(text: str)
  Inserts function declaration

user.code_insert_named_argument(parameter_name: str)
  Inserts a named argument

user.code_insert_return_type(type: str)
  Inserts a return type

user.code_insert_type_annotation(type: str)
  Inserts a type annotation

user.code_private_function(text: str)
  Inserts private function declaration

user.code_private_function_formatter(name: str)
  Inserts private function name with formatter

user.code_private_static_function(text: str)
  Inserts private static function

user.code_private_variable_formatter(name: str)
  inserts properly formatted private function name

user.code_protected_function(text: str)
  Inserts protected function declaration

user.code_protected_function_formatter(name: str)
  inserts properly formatted private function name

user.code_protected_static_function(text: str)
  Inserts public function

user.code_protected_variable_formatter(name: str)
  inserts properly formatted private function name

user.code_public_function(text: str)
  Inserts public function

user.code_public_function_formatter(name: str)
  inserts properly formatted private function name

user.code_public_static_function(text: str)
  Inserts public function

user.code_public_variable_formatter(name: str)
  inserts properly formatted private function name

user.code_insert_function(text: str, selection: str)
  Inserts a function and positions the cursor appropriately

user.code_select_function(number: int, selection: str)
  Inserts the selected function when the imgui is open

user.code_toggle_functions()
  GUI

user.code_block()
  Inserts equivalent of {
} for the active language, and places the cursor appropriately

user.code_break()
  Inserts break statement

user.code_next()
  Inserts next statement

user.code_state_case()
  Inserts case statement

user.code_state_do()
  Inserts do statement

user.code_state_else()
  Inserts else statement

user.code_state_else_if()
  Inserts else if statement

user.code_state_for()
  Inserts for statement

user.code_state_for_each()
  Inserts for each equivalent statement

user.code_state_go_to()
  inserts go-to statement

user.code_state_if()
  Inserts if statement

user.code_state_return()
  Inserts return statement

user.code_state_switch()
  Inserts switch statement

user.code_state_while()
  Inserts while statement

user.code_try_catch()
  Inserts try/catch. If selection is true, does so around the selection

user.code_import()
  import/using equivalent

user.code_insert_library(text: str, selection: str)
  Inserts a library and positions the cursor appropriately

user.code_select_library(number: int, selection: str)
  Inserts the selected library when the imgui is open

user.code_toggle_libraries()
  GUI

user.code_define_class()
  Starts a class definition (e.g., Java's "class" keyword)

user.code_operator_object_accessor()
  Inserts the object accessor operator (e.g., Java's "." or PHP's "->)

user.code_self()
  Inserts a reference to the current object (e.g., C++ "this" or Python's "self")

user.code_operator_subscript()
  code_operator_subscript (e.g., C++ [])

user.code_operator_addition_assignment()
  code_operator_addition_assignment

user.code_operator_assignment()
  code_operator_assignment

user.code_operator_bitwise_and_assignment()
  code_operator_and

user.code_operator_bitwise_exclusive_or_assignment()
  code_operator_bitwise_exclusive_or_assignment

user.code_operator_bitwise_left_shift_assignment()
  code_operator_bitwise_left_shift_assigment

user.code_operator_bitwise_or_assignment()
  code_operator_or_assignment

user.code_operator_bitwise_right_shift_assignment()
  code_operator_bitwise_right_shift_assignment

user.code_operator_division_assignment()
  code_operator_division_assignment

user.code_operator_increment()
  code_operator_increment

user.code_operator_modulo_assignment()
  code_operator_modulo_assignment

user.code_operator_multiplication_assignment()
  code_operator_multiplication_assignment

user.code_operator_subtraction_assignment()
  code_operator_subtraction_equals

user.code_operator_bitwise_and()
  code_operator_bitwise_and

user.code_operator_bitwise_exclusive_or()
  code_operator_bitwise_exclusive_or

user.code_operator_bitwise_left_shift()
  code_operator_bitwise_left_shift

user.code_operator_bitwise_or()
  code_operator_bitwise_or

user.code_operator_bitwise_right_shift()
  code_operator_bitwise_right_shift

user.code_operator_lambda()
  code_operator_lambda

user.code_operator_addition()
  code_operator_addition

user.code_operator_and()
  code_operator_and

user.code_operator_division()
  code_operator_division

user.code_operator_equal()
  code_operator_equal

user.code_operator_exponent()
  code_operator_exponent

user.code_operator_greater_than()
  code_operator_greater_than

user.code_operator_greater_than_or_equal_to()
  code_operator_greater_than_or_equal_to

user.code_operator_less_than()
  code_operator_less_than

user.code_operator_less_than_or_equal_to()
  code_operator_less_than_or_equal_to

user.code_operator_modulo()
  code_operator_modulo

user.code_operator_multiplication()
  code_operator_multiplication

user.code_operator_not_equal()
  code_operator_not_equal

user.code_operator_or()
  code_operator_or

user.code_operator_subtraction()
  code_operator_subtraction

user.code_operator_address_of()
  code_operator_address_of (e.g., C++ & op)

user.code_operator_indirection()
  code_operator_indirection

user.code_operator_structure_dereference()
  code_operator_structure_dereference (e.g., C++ -> op)

user.time_format(fmt: str = None) -> str
  Return the current time, formatted.
        fmt

user.time_format_utc(fmt: str = None) -> str
  Return the current UTC time, formatted.
        fmt

user.dragon_mode()
  For windows and Mac with Dragon, disables Talon commands and exits Dragon's command mode

user.talon_mode()
  For windows and Mac with Dragon, enables Talon commands and Dragon's command mode.

user.grid_activate()
  Show mouse grid

user.grid_close()
  Close the active grid

user.grid_go_back()
  Sets the grid state back to what it was before the last command

user.grid_narrow(digit: Union[int, str])
  Choose a field of the grid and narrow the selection down

user.grid_narrow_list(digit_list: List[str])
  Choose fields multiple times in a row

user.grid_place_window()
  Places the grid on the currently active window

user.grid_reset()
  Resets the grid to fill the whole screen again

user.grid_select_screen(screen: int)
  Brings up mouse grid

user.draft_get_text() -> str
  Returns the text in the draft window

user.draft_hide()
  Hides draft window

user.draft_named_move(name: str, screen_number: Optional[int] = None)
  Lets you move the window to the top, bottom, left, right, or middle
        of the screen.

user.draft_position_caret(anchor: str, after: int = 0)
  Positions the caret in the draft window

user.draft_resize(width: int, height: int)
  Resize the draft window.

user.draft_select(start_anchor: str, end_anchor: str = '', include_trailing_whitespace: int = 0)
  Selects text in the draft window

user.draft_show(text: Optional[str] = None)
  Shows draft window

user.navigation(navigation_action: str, direction: str, navigation_target_name: str, before_or_after: str, regex: re.Pattern, occurrence_number: int)
  Navigate in `direction` to the occurrence_number-th time that `regex` occurs, then execute `navigation_action` at the given `before_or_after` position.

user.navigation_by_name(navigation_action: str, direction: str, before_or_after: str, navigation_target_name: str, occurrence_number: int)
  Like user.navigation, but to a named target.
